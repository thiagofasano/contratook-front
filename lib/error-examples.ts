/**
 * Exemplos de como os erros da API s√£o tratados no sistema
 * 
 * Este arquivo demonstra como diferentes tipos de erro s√£o processados
 * e apresentados ao usu√°rio de forma clara e informativa.
 */

import { getApiErrorMessage, getAnalysisErrorMessage } from '@/lib/error-utils'

// ‚úÖ EXEMPLOS DE ERROS TRATADOS PELO SISTEMA

// 1. Erro de arquivo muito grande (413)
const fileTooBigError = {
  response: {
    status: 413,
    data: {
      message: "O arquivo enviado excede o tamanho m√°ximo permitido de 10MB"
    }
  }
}

// 2. Erro de formato n√£o suportado (415)
const unsupportedFormatError = {
  response: {
    status: 415,
    data: {
      error: "Formato de arquivo n√£o suportado. Use PDF, DOC ou DOCX."
    }
  }
}

// 3. Erro de documento n√£o process√°vel (422)
const unprocessableDocError = {
  response: {
    status: 422,
    data: "O documento n√£o cont√©m texto suficiente para an√°lise"
  }
}

// 4. Erro de servidor (500)
const serverError = {
  response: {
    status: 500,
    data: {
      details: "Erro interno do servidor. Nossa equipe foi notificada."
    }
  }
}

// 5. Erro de rede
const networkError = {
  code: 'NETWORK_ERROR',
  message: 'Network Error'
}

// 6. Erro de timeout
const timeoutError = {
  code: 'ECONNABORTED',
  message: 'timeout of 30000ms exceeded'
}

// ‚úÖ EXEMPLOS DE SA√çDA DOS TRATAMENTOS

console.log('=== EXEMPLOS DE TRATAMENTO DE ERROS ===\n')

console.log('1. Arquivo muito grande:')
console.log(getAnalysisErrorMessage(fileTooBigError))
// Sa√≠da: { title: "‚ùå Arquivo muito grande", message: "O arquivo enviado excede o tamanho m√°ximo permitido de 10MB" }

console.log('\n2. Formato n√£o suportado:')
console.log(getAnalysisErrorMessage(unsupportedFormatError))
// Sa√≠da: { title: "‚ùå Formato n√£o suportado", message: "Formato de arquivo n√£o suportado. Use PDF, DOC ou DOCX." }

console.log('\n3. Documento n√£o process√°vel:')
console.log(getAnalysisErrorMessage(unprocessableDocError))
// Sa√≠da: { title: "‚ùå Documento n√£o process√°vel", message: "O documento n√£o cont√©m texto suficiente para an√°lise" }

console.log('\n4. Erro de servidor:')
console.log(getApiErrorMessage(serverError))
// Sa√≠da: { title: "‚ùå Erro no servidor", message: "Erro interno do servidor. Nossa equipe foi notificada." }

console.log('\n5. Erro de rede:')
console.log(getApiErrorMessage(networkError))
// Sa√≠da: { title: "‚ùå Erro", message: "Erro de conex√£o. Verifique sua internet." }

console.log('\n6. Erro de timeout:')
console.log(getApiErrorMessage(timeoutError))
// Sa√≠da: { title: "‚ùå Erro", message: "Tempo limite esgotado." }

/**
 * üéØ BENEF√çCIOS DO NOVO SISTEMA:
 * 
 * ‚úÖ Mensagens espec√≠ficas da API s√£o mostradas ao usu√°rio
 * ‚úÖ Diferentes tipos de erro t√™m t√≠tulos apropriados
 * ‚úÖ Erros de rede e timeout s√£o tratados especificamente
 * ‚úÖ Status HTTP √© interpretado e apresentado de forma amig√°vel
 * ‚úÖ C√≥digo centralizado e reutiliz√°vel em todos os componentes
 * ‚úÖ Melhor experi√™ncia do usu√°rio com feedback claro
 * ‚úÖ Logs detalhados para debugging (console.error)
 * ‚úÖ Fallbacks para casos n√£o mapeados
 * 
 * üöÄ COMPONENTES QUE USAM O TRATAMENTO MELHORADO:
 * - UploadSection: An√°lise de documentos
 * - HistorySection: Carregamento, download e exclus√£o de an√°lises
 * - AlertsSection: (pode ser adicionado posteriormente)
 * - Todos os interceptors do Axios
 */